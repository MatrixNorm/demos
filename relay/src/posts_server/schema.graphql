interface Node {
  id: ID!
}

type Post implements Node {
  id: ID!
  title: String!
  author: User!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
}

type PostEdge {
  node: Post
  cursor: String!
}

type User implements Node {
  id: ID!
  name: String!
  posts: [Post]
}

type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: String
  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PostOrderingFields {
  createdAt
  viewsCount
}

input PostOrdering {
  field: PostOrderingFields!
  desc: Boolean
}

type XXX {
  posts(
    after: String,
    first: Int,
    before: String,
    last: Int,
    orderBy: PostOrdering
  ): PostConnection
}

type Query {
  node(id: ID!): Node
  """ https://github.com/facebook/relay/issues/1983 """
  xxx: XXX
}

schema {
  query: Query
}
