interface Node {
  id: ID!
}

input UpdateUserSettingsInput {
  userId: ID!
  citiesPaginationPageSize: Int
  foo: String
  bar: Int
}

type UpdateUserSettingsPayload {
  user: User!
}

type Mutation {
  updateUserSettings(input: UpdateUserSettingsInput!): UpdateUserSettingsPayload!
}

type Query {
  node(id: ID!): Node
  viewer: User
  citiesPagination(
    pageSize: Int
    after: String
    before: String
    searchParams: CitySearchParamsInput
  ): CitiesPagination
  citiesMetadata: CitiesMetadata
  countries(searchString: String!): [String!]
}

type User implements Node {
  id: ID!
  name: String!
  settings: UserSettings
}

type UserSettings {
  citiesPaginationPageSize: Int!
  foo: String!
  bar: Int!
}

type CitiesPagination {
  nodes: [City!]
  hasNext: Boolean!
  hasPrev: Boolean!
  pageSize: Int!
}

type City implements Node {
  id: ID!
  name: String!
  country: String!
  population: Int!
  lat: Float!
  lng: Float!
  stereotypicalPhotoUrl: String
}

type CitiesMetadata {
  populationLowerBound: Int!
  populationUpperBound: Int!
}

enum CitiesOrderAttr {
  nameASC
  nameDESC
  populationASC
  populationDESC
  latASC
  latDESC
  lngASC
  lngDESC
  countryASC
  countryDESC
}

input CitySearchParamsInput {
  countryNameContains: String
  populationGte: Int
  populationLte: Int
}
