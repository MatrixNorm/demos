interface Node {
  id: ID!
}

type Mutation {
  dummy(x: Int!): Int!
}

type Query {
  node(id: ID!): Node
  viewer: User
  citiesPagination(
    pageNo: Int!
  ): CitiesPagination
  citiesMetadata: CitiesMetadata
}

type User implements Node {
  id: ID!
  cityFilters: [CityFilter!]
  pinnedCityFilter: CityFilter
}

type CitiesPagination {
  nodes: [City!]
  pageNo: Int!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
}

type City implements Node {
  id: ID!
  name: String!
  country: String!
  population: Int!
  lat: Float!
  lng: Float!
}

type CitiesMetadata {
  countries: [String!]!
  population_lower_bound: Int!
  population_upper_bound: Int!
  lat_lower_bound: Float!
  lat_upper_bound: Float!
  lng_lower_bound: Float!
  lng_upper_bound: Float!
}

type CityFilter implements Node {
  id: ID!
  name: String!
  country: String
  population_gte: Float
  population_lse: Float
  orderBy: CitiesOrderAttr!
  orderByDesc: Boolean
}

enum CitiesOrderAttr {
  name
  population
  lat
  lng
  country
}