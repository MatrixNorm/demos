interface Node {
  id: ID!
}

""" Post """

type Post implements Node {
  id: ID!
  title: String!
  author: User!
}

enum PostOrderingFields {
  createdAt
  viewsCount
}

type PostOrdering {
  field: PostOrderingFields!
  desc: Boolean!
}

input PostOrderingInput {
  field: PostOrderingFields!
  desc: Boolean!
}

""" User """

type User implements Node {
  id: ID!
  name: String!
  posts(
    after: String,
    first: Int
  ): PostConnection
}

""" 
  Need this because currently it is impossible to
  alias fragments directly like this:

  query {
    x: ...SomeFragment
    y: ..SomeFragment
  }
"""
type PostSearch {
  posts(
    after: String,
    first: Int,
    before: String,
    last: Int,
    orderBy: PostOrderingInput
  ): PostConnection
}

type Query {
  node(id: ID!): Node
  """ https://github.com/facebook/relay/issues/1983 """
  search: PostSearch
}

schema {
  query: Query
}

""" connections """

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  orderBy: PostOrdering!
}

type PostEdge {
  node: Post
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}