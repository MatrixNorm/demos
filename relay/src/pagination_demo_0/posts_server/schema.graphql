interface Node {
  id: ID!
}

type Mutation {
  dummy(x: Int!): Int!
}

""" Post """

type Post implements Node {
  id: ID!
  title: String!
  author: User!
}

enum PostOrderingField {
  createdAt
  viewsCount
}

type PostOrdering {
  field: PostOrderingField!
  desc: Boolean!
}

input PostOrderingInput {
  field: PostOrderingField!
  desc: Boolean!
}

""" User """

type User implements Node {
  id: ID!
  name: String!
  posts(
    after: String,
    first: Int
  ): PostConnection
}

""" 
  Need this because currently it is impossible to
  alias fragments directly like this:
      query {
        x: ...SomeFragment
        y: ...SomeFragment
      }
  See https://github.com/facebook/relay/issues/1983 
"""
type Viewer {
  postConnection(
    after: String,
    first: Int,
    before: String,
    last: Int,
    orderBy: PostOrderingInput
  ): PostConnection
}

type Query {
  node(id: ID!): Node
  viewer: Viewer
}

""" connections """

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  orderBy: PostOrdering!
}

type PostEdge {
  node: Post
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}